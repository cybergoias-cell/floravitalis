#!/bin/bash

# üöÄ Script de Instala√ß√£o Autom√°tica - Sistema de Automa√ß√£o de Entrega
# Vers√£o: 1.0
# Autor: Sistema Manus

echo "üöÄ Iniciando instala√ß√£o do Sistema de Automa√ß√£o de Entrega..."
echo "=================================================="

# Cores para output
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# Fun√ß√£o para imprimir mensagens coloridas
print_status() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

print_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

print_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

print_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

# Verificar se Node.js est√° instalado
check_nodejs() {
    if command -v node &> /dev/null; then
        NODE_VERSION=$(node --version)
        print_status "Node.js encontrado: $NODE_VERSION"
        
        # Verificar se a vers√£o √© 18+
        MAJOR_VERSION=$(echo $NODE_VERSION | cut -d'.' -f1 | sed 's/v//')
        if [ "$MAJOR_VERSION" -lt 18 ]; then
            print_error "Node.js vers√£o 18+ √© necess√°rio. Vers√£o atual: $NODE_VERSION"
            exit 1
        fi
    else
        print_error "Node.js n√£o encontrado. Por favor, instale Node.js 18+ antes de continuar."
        print_info "Visite: https://nodejs.org/"
        exit 1
    fi
}

# Verificar se npm est√° instalado
check_npm() {
    if command -v npm &> /dev/null; then
        NPM_VERSION=$(npm --version)
        print_status "npm encontrado: $NPM_VERSION"
    else
        print_error "npm n√£o encontrado. Por favor, instale npm antes de continuar."
        exit 1
    fi
}

# Instalar pnpm se n√£o estiver instalado
install_pnpm() {
    if command -v pnpm &> /dev/null; then
        PNPM_VERSION=$(pnpm --version)
        print_status "pnpm encontrado: $PNPM_VERSION"
    else
        print_info "Instalando pnpm..."
        npm install -g pnpm
        if [ $? -eq 0 ]; then
            print_status "pnpm instalado com sucesso"
        else
            print_warning "Falha ao instalar pnpm. Usando npm como alternativa."
        fi
    fi
}

# Instalar depend√™ncias do backend
install_backend_deps() {
    print_info "Instalando depend√™ncias do backend..."
    npm install
    if [ $? -eq 0 ]; then
        print_status "Depend√™ncias do backend instaladas"
    else
        print_error "Falha ao instalar depend√™ncias do backend"
        exit 1
    fi
}

# Instalar depend√™ncias da loja virtual
install_store_deps() {
    print_info "Instalando depend√™ncias da loja virtual..."
    cd loja-virtual
    
    if command -v pnpm &> /dev/null; then
        pnpm install
    else
        npm install
    fi
    
    if [ $? -eq 0 ]; then
        print_status "Depend√™ncias da loja virtual instaladas"
    else
        print_error "Falha ao instalar depend√™ncias da loja virtual"
        exit 1
    fi
    cd ..
}

# Instalar depend√™ncias do painel admin
install_admin_deps() {
    print_info "Instalando depend√™ncias do painel administrativo..."
    cd admin-frontend
    
    if command -v pnpm &> /dev/null; then
        pnpm install
    else
        npm install
    fi
    
    if [ $? -eq 0 ]; then
        print_status "Depend√™ncias do painel admin instaladas"
    else
        print_error "Falha ao instalar depend√™ncias do painel admin"
        exit 1
    fi
    cd ..
}

# Configurar arquivo .env
setup_env() {
    if [ ! -f .env ]; then
        print_info "Configurando arquivo .env..."
        cp .env.example .env
        print_status "Arquivo .env criado"
        print_warning "IMPORTANTE: Edite o arquivo .env com suas credenciais antes de usar o sistema"
        print_info "Execute: nano .env"
    else
        print_status "Arquivo .env j√° existe"
    fi
}

# Tornar scripts execut√°veis
make_scripts_executable() {
    print_info "Configurando permiss√µes dos scripts..."
    chmod +x start-dev.sh
    chmod +x install.sh
    print_status "Permiss√µes configuradas"
}

# Verificar portas dispon√≠veis
check_ports() {
    print_info "Verificando portas dispon√≠veis..."
    
    # Verificar porta 3000 (backend)
    if lsof -i :3000 &> /dev/null; then
        print_warning "Porta 3000 est√° em uso. O backend pode n√£o iniciar corretamente."
    else
        print_status "Porta 3000 dispon√≠vel (backend)"
    fi
    
    # Verificar porta 5173 (admin)
    if lsof -i :5173 &> /dev/null; then
        print_warning "Porta 5173 est√° em uso. O painel admin pode n√£o iniciar corretamente."
    else
        print_status "Porta 5173 dispon√≠vel (admin)"
    fi
    
    # Verificar porta 5174 (loja)
    if lsof -i :5174 &> /dev/null; then
        print_warning "Porta 5174 est√° em uso. A loja virtual pode n√£o iniciar corretamente."
    else
        print_status "Porta 5174 dispon√≠vel (loja)"
    fi
}

# Criar diret√≥rios necess√°rios
create_directories() {
    print_info "Criando diret√≥rios necess√°rios..."
    mkdir -p logs
    mkdir -p uploads
    mkdir -p temp
    print_status "Diret√≥rios criados"
}

# Fun√ß√£o principal
main() {
    echo ""
    print_info "Verificando pr√©-requisitos..."
    check_nodejs
    check_npm
    install_pnpm
    
    echo ""
    print_info "Instalando depend√™ncias..."
    install_backend_deps
    install_store_deps
    install_admin_deps
    
    echo ""
    print_info "Configurando sistema..."
    setup_env
    make_scripts_executable
    create_directories
    check_ports
    
    echo ""
    echo "=================================================="
    print_status "Instala√ß√£o conclu√≠da com sucesso! üéâ"
    echo "=================================================="
    echo ""
    print_info "Pr√≥ximos passos:"
    echo "1. Configure suas credenciais no arquivo .env:"
    echo "   nano .env"
    echo ""
    echo "2. Inicie o sistema:"
    echo "   ./start-dev.sh"
    echo ""
    echo "3. Acesse as interfaces:"
    echo "   ‚Ä¢ Loja Virtual: http://localhost:5174"
    echo "   ‚Ä¢ Painel Admin: http://localhost:5173"
    echo "   ‚Ä¢ API Backend:  http://localhost:3000"
    echo ""
    print_info "Para mais informa√ß√µes, consulte:"
    echo "   ‚Ä¢ INSTALACAO-COMPLETA.md"
    echo "   ‚Ä¢ README-COMPLETO.md"
    echo ""
    print_status "Sistema pronto para uso!"
}

# Executar fun√ß√£o principal
main
